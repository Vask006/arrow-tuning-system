name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install semantic-release
        run: |
          npm install -g \
            semantic-release@^22.0.0 \
            @semantic-release/changelog@^6.0.0 \
            @semantic-release/git@^10.0.0 \
            @semantic-release/github@^9.0.0 \
            @semantic-release/exec@^6.0.0 \
            conventional-changelog-conventionalcommits@^7.0.0

      - name: Create .releaserc.json
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "plugins": [
              ["@semantic-release/commit-analyzer", {
                "preset": "conventionalcommits",
                "releaseRules": [
                  {"type": "feat", "release": "minor"},
                  {"type": "fix", "release": "patch"},
                  {"type": "perf", "release": "patch"},
                  {"type": "revert", "release": "patch"},
                  {"type": "docs", "scope": "README", "release": "patch"},
                  {"breaking": true, "release": "major"}
                ]
              }],
              ["@semantic-release/release-notes-generator", {
                "preset": "conventionalcommits",
                "presetConfig": {
                  "types": [
                    {"type": "feat", "section": "✨ Features"},
                    {"type": "fix", "section": "🐛 Bug Fixes"},
                    {"type": "perf", "section": "⚡ Performance"},
                    {"type": "revert", "section": "⏪ Reverts"},
                    {"type": "docs", "section": "📚 Documentation"},
                    {"type": "style", "section": "💄 Styling"},
                    {"type": "refactor", "section": "♻️ Code Refactoring"},
                    {"type": "test", "section": "✅ Tests"},
                    {"type": "build", "section": "🏗️ Build System"},
                    {"type": "ci", "section": "👷 CI/CD"}
                  ]
                }
              }],
              ["@semantic-release/changelog", {
                "changelogFile": "CHANGELOG.md"
              }],
              ["@semantic-release/github", {
                "assets": [
                  {"path": "dist/*.tar.gz", "label": "Source distribution"},
                  {"path": "dist/*.whl", "label": "Wheel distribution"}
                ]
              }],
              ["@semantic-release/git", {
                "assets": ["CHANGELOG.md", "pyproject.toml", "backend/app/__init__.py"],
                "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
              }]
            ]
          }
          EOF

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
        run: npx semantic-release

  build-and-publish:
    name: Build and Publish Docker Images
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    strategy:
      matrix:
        component: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          file: ./${{ matrix.component }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

