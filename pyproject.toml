[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "arrow-tuning-system"
version = "0.1.0"
description = "Privacy-first, edge-optimized performance tuning and analytics platform"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "ATS Team", email = "team@ats.dev"}
]
keywords = ["performance", "analytics", "edge-computing", "ml", "iot"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "fastapi>=0.109.0",
    "uvicorn[standard]>=0.27.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.4",
    "pytest-asyncio>=0.23.3",
    "pytest-cov>=4.1.0",
    "black>=23.12.1",
    "isort>=5.13.2",
    "ruff>=0.1.11",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]

backend = [
    "sqlalchemy[asyncio]>=2.0.25",
    "asyncpg>=0.29.0",
    "alembic>=1.13.1",
    "redis[hiredis]>=5.0.1",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "loguru>=0.7.2",
    "httpx>=0.26.0",
    "slowapi>=0.1.9",
]

ml = [
    "torch>=2.1.0",
    "ultralytics>=8.1.0",
    "onnx>=1.15.0",
    "onnxruntime>=1.16.0",
    "opencv-python>=4.9.0",
    "numpy>=1.24.0",
]

edge = [
    "onnxruntime>=1.16.0",
    "opencv-python>=4.9.0",
    "numpy>=1.24.0",
]

all = [
    "arrow-tuning-system[dev,backend,ml,edge]",
]

[project.urls]
Homepage = "https://github.com/Vask006/arrow-tuning-system"
Documentation = "https://github.com/Vask006/arrow-tuning-system/docs"
Repository = "https://github.com/Vask006/arrow-tuning-system"
Issues = "https://github.com/Vask006/arrow-tuning-system/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["backend*", "ml_models*"]
namespaces = false

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.venv
  | build
  | dist
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
line_length = 100
skip_gitignore = true
known_first_party = ["backend", "ml_models"]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "passlib.*",
    "slowapi.*",
    "ultralytics.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
asyncio_mode = "auto"
testpaths = ["backend/tests", "ml_models/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--cov=backend",
    "--cov=ml_models",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["backend", "ml_models"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.semantic_release]
version_variable = [
    "pyproject.toml:version",
    "backend/app/__init__.py:__version__",
]
branch = "main"
upload_to_repository = false
upload_to_release = true
build_command = "pip install build && python -m build"

